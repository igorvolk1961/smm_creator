#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ PythonAnywhere
–ó–∞–ø—É—Å–∫–∞—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
"""

import os
import shutil
from pathlib import Path

def fix_routes_file():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª routes.py, —É–¥–∞–ª—è—è –¥—É–±–ª–∏—Ä—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏"""
    
    routes_file = "app/smm/routes.py"
    
    if not os.path.exists(routes_file):
        print(f"‚ùå –§–∞–π–ª {routes_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    backup_file = f"{routes_file}.backup"
    shutil.copy2(routes_file, backup_file)
    print(f"üìã –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_file}")
    
    # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
    with open(routes_file, 'r', encoding='utf-8') as f:
        lines = f.readlines()
    
    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ serve_generated_image
    serve_function_lines = []
    for i, line in enumerate(lines):
        if 'def serve_generated_image' in line:
            serve_function_lines.append(i)
    
    print(f"üîç –ù–∞–π–¥–µ–Ω–æ —Ñ—É–Ω–∫—Ü–∏–π serve_generated_image: {len(serve_function_lines)}")
    
    if len(serve_function_lines) <= 1:
        print("‚úÖ –î—É–±–ª–∏—Ä—É—é—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return True
    
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π
    lines_to_remove = []
    for i in range(len(serve_function_lines) - 1):
        start_line = serve_function_lines[i]
        # –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω–µ—Ü —Ñ—É–Ω–∫—Ü–∏–∏ (—Å–ª–µ–¥—É—é—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–ª–∏ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞)
        end_line = start_line + 1
        while end_line < len(lines):
            if (lines[end_line].strip().startswith('def ') or 
                lines[end_line].strip().startswith('@bp.route') or
                end_line == len(lines) - 1):
                break
            end_line += 1
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        for j in range(start_line, end_line):
            lines_to_remove.append(j)
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    for line_num in sorted(lines_to_remove, reverse=True):
        del lines[line_num]
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    with open(routes_file, 'w', encoding='utf-8') as f:
        f.writelines(lines)
    
    print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {len(lines_to_remove)} —Å—Ç—Ä–æ–∫ —Å –¥—É–±–ª–∏—Ä—É—é—â–∏–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏")
    print(f"üìù –§–∞–π–ª {routes_file} –æ–±–Ω–æ–≤–ª–µ–Ω")
    
    return True

def main():
    print("üöÄ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ routes.py –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ...")
    
    if fix_routes_file():
        print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        print("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ PythonAnywhere")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞")

if __name__ == "__main__":
    main()
